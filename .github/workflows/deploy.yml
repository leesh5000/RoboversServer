name: Deploy to AWS ECR and EC2

on:
  push:
    branches:
      - main
  pull_request:
    types: [closed]
    branches:
      - main

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event.pull_request.merged == true)

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate --schema=apps/user/prisma/schema.prisma

      - name: Run linter
        run: npm run lint

      - name: Run tests
        run: npm run test:user

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        run: |
          docker build -f apps/user/docker/Dockerfile.production \
            -t ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} \
            -t ${{ env.ECR_REPOSITORY }}:latest \
            .

      - name: Push image to Amazon ECR
        run: |
          docker push ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.ECR_REPOSITORY }}:latest

  deploy:
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event.pull_request.merged == true)

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 프로젝트 디렉토리 확인 및 생성
            if [ ! -d "/home/ubuntu/robovers-server" ]; then
              echo "📁 Creating project directory..."
              git clone https://github.com/${{ github.repository }}.git /home/ubuntu/robovers-server
            fi
            
            cd /home/ubuntu/robovers-server
            
            # 최신 코드 가져오기
            echo "🔄 Pulling latest code..."
            git pull origin main
            
            # 스크립트 실행 권한 부여
            chmod +x scripts/*.sh
            
            # 환경 변수 파일 생성 (GitHub Secrets 사용)
            echo "📝 Creating environment file..."
            cat > .env.production << 'EOF'
            ${{ secrets.ENV_PRODUCTION }}
            EOF
            
            # Docker 및 Docker Compose 설치 확인
            if ! command -v docker &> /dev/null; then
              echo "🐳 Docker not found. Running setup script..."
              ./scripts/setup-ec2.sh
            fi
            
            # ECR 로그인
            echo "🔐 Logging in to ECR..."
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REPOSITORY }}
            
            # 배포 스크립트 실행
            echo "🚀 Running deployment script..."
            ./scripts/deploy-ec2.sh ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}